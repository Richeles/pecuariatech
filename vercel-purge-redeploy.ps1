<# 
 UltraBiol√≥gica Cloud ‚Äî PecuariaTech v5.3.9 
 Script: vercel-purge-redeploy.ps1
 Autor: Richeles Alves dos Santos üß†‚ö°
 Fun√ß√£o: Purga total, rebuild e redeploy autom√°tico com verifica√ß√£o UTF-8.
#>

$ErrorActionPreference = "Stop"
$Root = "C:\Users\Administrador\pecuariatech"
$LogDir = Join-Path $Root "logs"
if (-not (Test-Path $LogDir)) { New-Item -ItemType Directory -Path $LogDir | Out-Null }

$Date = Get-Date -Format "yyyyMMdd_HHmmss"
$LogFile = Join-Path $LogDir "vercel-purge-redeploy-$Date.log"
$Url = "https://www.pecuariatech.com/dashboard"

Write-Host "üß± Iniciando reconstru√ß√£o completa do PecuariaTech..." -ForegroundColor Cyan
Start-Sleep -Seconds 1

# 1Ô∏è‚É£ Limpeza de caches locais e builds antigos
Write-Host "üßπ Limpando cache local, node_modules e builds antigos..." -ForegroundColor Yellow
@(".next", "node_modules", ".turbo", ".vercel") | ForEach-Object {
    if (Test-Path $_) { Remove-Item $_ -Recurse -Force -ErrorAction SilentlyContinue }
}
npm cache clean --force | Out-Null

# 2Ô∏è‚É£ Reinstala√ß√£o de depend√™ncias
Write-Host "üì¶ Reinstalando depend√™ncias..." -ForegroundColor Yellow
npm install | Tee-Object -FilePath $LogFile -Append

# 3Ô∏è‚É£ Build completo
Write-Host "‚öôÔ∏è Compilando projeto Next.js..." -ForegroundColor Yellow
npm run build | Tee-Object -FilePath $LogFile -Append

# 4Ô∏è‚É£ Commit e envio para GitHub
Write-Host "üöÄ Enviando para GitHub (for√ßando redeploy na Vercel)..." -ForegroundColor Yellow
git add -A
git commit --allow-empty -m "deploy: rebuild completo e purga de cache UTF-8 ($Date)" | Out-Null
git push origin main | Tee-Object -FilePath $LogFile -Append

# 5Ô∏è‚É£ Verifica√ß√£o UTF-8 p√≥s-deploy
Write-Host "üåê Verificando status de deploy e codifica√ß√£o UTF-8..." -ForegroundColor Cyan
Start-Sleep -Seconds 5

try {
    Add-Type -AssemblyName System.Net.Http
    $handler = New-Object System.Net.Http.HttpClientHandler
    $handler.AutomaticDecompression = [System.Net.DecompressionMethods]::GZip -bor [System.Net.DecompressionMethods]::Deflate
    $client = New-Object System.Net.Http.HttpClient($handler)
    $client.DefaultRequestHeaders.Add("User-Agent","PecuariaTech UTF8 Post-Deploy Checker")

    $response = $client.GetAsync($Url).Result
    $headers = $response.Content.Headers
    $html = $response.Content.ReadAsStringAsync().Result
    $charset = "n√£o detectado"

    if ($headers.Contains("Content-Type")) {
        $contentType = $headers.GetValues("Content-Type")
        if ($contentType -match "charset\s*=\s*([^\s;]+)") {
            $charset = $Matches[1]
        }
    }

    Write-Host "`nüìã Content-Type: $contentType" -ForegroundColor Gray
    Write-Host "üîç Charset detectado: $charset" -ForegroundColor Yellow

    if ($charset -match "utf-8") {
        Write-Host "‚úÖ Site servindo UTF-8 corretamente!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Charset incorreto detectado: $charset" -ForegroundColor Red
    }

    $report = @"
Relat√≥rio de Deploy PecuariaTech ‚Äî $(Get-Date)
URL: $Url
Charset: $charset
Status HTTP: $($response.StatusCode)
------------------------------------------------
Trecho inicial do HTML:
$($html.Substring(0,[Math]::Min($html.Length,400)))
------------------------------------------------
"@
    $report | Out-File -FilePath $LogFile -Encoding UTF8
    Write-Host "`nüíæ Log completo salvo em: $LogFile" -ForegroundColor Cyan
}
catch {
    Write-Host "‚ùå Erro durante verifica√ß√£o p√≥s-deploy: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`n‚ú® Finalizado! Aguarde o build da Vercel (~2‚Äì5min) e depois abra:" -ForegroundColor Green
Write-Host "üëâ https://www.pecuariatech.com/dashboard" -ForegroundColor Yellow

Add-Type -AssemblyName PresentationCore,PresentationFramework
[System.Media.SystemSounds]::Asterisk.Play()
